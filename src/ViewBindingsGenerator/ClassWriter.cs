using System;

namespace P41.ViewBindingsGenerator;

/// <summary>
/// A class that helps write a class.
/// Call <see cref="Using(string)"/> to add usings for your class.
/// Call <see cref="Code(Action{CodeWriter})"/> to write code inside the your class.
/// The code will be written upon execution of the <see cref="ToString"/> method.
/// </summary>
internal class ClassWriter
{
    private readonly HashSet<string> _namespaces = new();
    private Action<CodeWriter>? _code;

    public string Namespace { get; }

    public string Accessibility { get; }

    public string Class { get; }

    public ClassWriter(INamedTypeSymbol symbol)
    {
        Namespace = symbol.GetNamespace();
        Accessibility = symbol.GetAccessibility();
        Class = symbol.GetClass();
    }

    public ClassWriter(string @namespace, string accessibility, string @class)
    {
        Namespace = @namespace;
        Accessibility = accessibility;
        Class = @class;
    }

    /// <summary>
    /// Add a namespace to use as a using statement for your class.
    /// </summary>
    public ClassWriter Using(string @namespace)
    {
        _namespaces.Add(@namespace);
        return this;
    }

    /// <summary>
    /// Write code inside your class. The code will be indented.
    /// You can call this Multiple times.
    /// </summary>
    public ClassWriter Code(Action<CodeWriter> code)
    {
        _code += code;
        return this;
    }

    public override string ToString()
    {
        var namespaces = _namespaces.OrderBy(static n => n).ToArray();
        var code = new CodeWriter(0);

        code.Line("// <auto-generated>");
        code.Line("//     This code was generated by a tool.");
        code.Line("//");
        code.Line("//     Changes to this file may cause incorrect behavior");
        code.Line("//     and will be lost if the code is regenerated.");
        code.Line("//");
        code.Line("// <auto-generated>");
        code.Line();
        code.Line("#nullable disable");
        code.Line();
        if (namespaces.Length != 0)
        {
            code.Lines(namespaces.Select(ns => $"using {ns};"));
            code.Line();
        }
        code.Line($"namespace {Namespace}");
        code.Line('{');
        code.Indent(s =>
        {
            s.Line($"{Accessibility} partial class  {Class}");
            s.Line('{');
            s.Indent(_code);
            s.Line('}');
        });
        code.Line('}');
        code.Line();
        code.Line("#nullable restore");
        code.Line();

        return code.ToString();
    }

    public class CodeWriter
    {
        readonly int indent;
        readonly StringBuilder builder;

        public CodeWriter(int indent) : this(indent, new())
        {
        }

        public CodeWriter(int indent, StringBuilder builder)
        {
            this.indent = indent;
            this.builder = builder;
        }

        /// <summary>
        /// Writes a new line.
        /// </summary>
        public CodeWriter Line()
        {
            builder.AppendLine();
            return this;
        }

        /// <summary>
        /// Writes the value and then a new line.
        /// </summary>
        public CodeWriter Line(string value)
        {
            builder.Append(' ', indent).AppendLine(value);
            return this;
        }

        /// <summary>
        /// Writes the value and then a new line.
        /// </summary>
        public CodeWriter Line(char value)
        {
            builder.Append(' ', indent).Append(value).AppendLine();
            return this;
        }

        /// <summary>
        /// Writes each value on its own line.
        /// </summary>
        public CodeWriter Lines(IEnumerable<string> values)
        {
            foreach (var value in values)
            {
                Line(value);
            }
            return this;
        }

        /// <summary>
        /// Writes indented lines.
        /// </summary>
        /// <param name="writer">The writer to write the indented lines with.</param>
        public CodeWriter Indent(Action<CodeWriter>? writer)
        {
            if (writer is null) return this;

            var section = new CodeWriter(indent + 4, builder);
            writer(section);
            return this;
        }

        /// <summary>
        /// Get a string representing the written code.
        /// </summary>
        /// <returns>The written code.</returns>
        public override string ToString()
        {
            return builder.ToString();
        }
    }
}
