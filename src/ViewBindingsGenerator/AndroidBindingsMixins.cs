using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Linq;
using System.Text;

namespace P41.ViewBindingsGenerator;

internal static class AndroidBindingsMixins
{
    public static string[] AttributeNames { get; } = new[] { "GenerateBindings", "GenerateBindingsAttribute" };

    public static StringBuilder Render(this StringBuilder sb,
        string @namespace, string @class, (string type, string id)[] properties, bool isFragment)
    {
        sb.Append(@$"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;

namespace {@namespace}
{{
    public partial class {@class}
    {{")
        .RenderProperties(properties, isFragment)
        .AppendLine(@$"
    }}
}}");
        return sb;
    }

    private static StringBuilder RenderProperties(this StringBuilder sb, (string type, string id)[] properties, bool isFragment)
    {
        var count = properties.Length;
        for (int i = 0; i < count; i++)
        {
            var (type, id) = properties[i];

            var name = id; // todo: Implement naming convention.
            sb.AppendLine(isFragment 
                ?$@"
        public {type} {name} => View.FindViewById<{type}>(Resource.Id.{id});"
                :$@"
        public {type} {name} => this.FindViewById<{type}>(Resource.Id.{id});");
        }
        return sb;
    }

    /// <summary>
    /// Get the AdditioanlText in in a dictionary with key the filename with the extension.
    /// </summary>
    /// <param name="additionalFiles"></param>
    /// <returns></returns>
    public static Dictionary<string, AdditionalText> GetXmlFiles(this ImmutableArray<AdditionalText> additionalFiles)
    {
        var files = new Dictionary<string, AdditionalText>();
        var count = additionalFiles.Length;

        for (int i = 0; i < count; i++)
        {
            var file = additionalFiles[i];
            var path = file.Path;

            if (!path.EndsWith(".xml")) continue;

            files.Add(Path.GetFileName(path), file);
        }
        return files;
    }

    // todo: Write Summary
    /// <summary>
    /// Get 'NamespaceMappingAttribute' Java to Managed mappings to use for replacement in xml files.
    /// </summary>
    /// <param name="compilation"></param>
    /// <returns></returns>
    public static Dictionary<string, string> GetNamespaceMappings(this Compilation compilation)
    {
        var mappings = new Dictionary<string, string>();
        var assemblies = compilation.SourceModule.ReferencedAssemblySymbols;
        var count = assemblies.Length;

        for (int i = 0; i < count; i++)
        {
            var assembly = assemblies[i];

            if (!assembly.Name.Contains("Android")) continue;

            var attrs = assembly.GetAttributes();
            for (int j = 0; j < attrs.Length; j++)
            {
                var attr = attrs[j];
                if (attr.AttributeClass is { Name: "NamespaceMappingAttribute" })
                {
                    var x = attr.ToString().Split('"');
                    var java = x[1];

                    if (mappings.ContainsKey(java)) continue;

                    var managed = x[3];
                    mappings.Add(java, managed);
                }
            }
        }
        return mappings;
    }

    public static bool IsActivity(this string str) => str.Contains("App.Activity");
    public static bool IsFragment(this string str) => str.Contains("App.Fragment");
    public static bool IsView(this string str) => str.Contains("Views.View");

    public static bool IsFragment(this INamedTypeSymbol symbol) => IsSymbolAndroidType(symbol, IsFragment);
    public static bool IsActivity(this INamedTypeSymbol symbol) => IsSymbolAndroidType(symbol, IsActivity);
    public static bool IsView(this INamedTypeSymbol symbol) => IsSymbolAndroidType(symbol, IsView);

    private static bool IsSymbolAndroidType(INamedTypeSymbol symbol, Func<string, bool> func)
    {
        var baseType = symbol.BaseType;
        var typeName = baseType?.ToDisplayString();

        while (typeName is { Length: > 0 } && typeName != "object")
        {
            if (typeName.Contains("Android") && func(typeName)) return true;

            baseType = baseType?.BaseType;
            typeName = baseType?.ToDisplayString();
        }
        return false;
    }
}
